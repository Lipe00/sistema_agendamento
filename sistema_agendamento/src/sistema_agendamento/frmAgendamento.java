/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sistema_agendamento;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.text.MaskFormatter;
import static sistema_agendamento.ValidarCPF.*;

/**
 *
 * @author T-GAMER
 */
public class frmAgendamento extends javax.swing.JFrame {

    /**
     * Creates new form frmAgendamento
     */
    MaskFormatter mfdata,mfhora, mfcpf, mftel;
    Vector<Integer> especialidadesIndex = new Vector<Integer>();
    Vector<Integer> espMed = new Vector<Integer>();
    Vector<String> medicosCPF = new Vector<String>();
    int globalId;
    String[] horarios = {
        "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", 
        "11:00", "11:30", "12:00", "12:30", "13:00", "13:30", 
        "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", 
        "17:00", "17:30", "18:00", "18:30", "19:00"
    };
    public frmAgendamento(int id) {
        try {
            mfdata = new MaskFormatter("##/##/####");
            mfhora = new MaskFormatter("##:##");
            mfcpf = new MaskFormatter("###.###.###-##");
            mftel = new MaskFormatter("(##)# ####-####");
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao criar máscaras");
        }
        initComponents();
        loadEspecialidades();
        loadMedicos(especialidadesIndex.get(0));
        globalId = id;
        if(globalId != -1){
            try {
                
                AgendamentoDAO objAgendamentoDAO = new AgendamentoDAO();
                ArrayList<AgendamentoDTO> lista = objAgendamentoDAO.buscarAgendamento(id);
                
                lblPrincipal.setText("Agendamentos :: Alterar");
                btnCadastrar.setText("Alterar");
                
                txtCpf.setText(lista.get(0).getCpfPac());
                btnSearch.doClick();
                String data =(lista.get(0).getDataAgenda());
                
                //FORMATANDO AS DATAS
                SimpleDateFormat sdfEntrada = new SimpleDateFormat("yyyy-MM-dd");
                SimpleDateFormat sdfSaida = new SimpleDateFormat("dd/MM/yyyy");
                
                String dataFormatada = sdfSaida.format(sdfEntrada.parse(data));
                txtData.setText(dataFormatada);
                
                        
                int medIndex = medicosCPF.indexOf(lista.get(0).getCpfMed());
                cbxMed.setSelectedIndex(medIndex);
                        
                int espIndex = especialidadesIndex.indexOf(lista.get(0).getIdEsp());
                cbxEsp.setSelectedIndex(espIndex);
                        
                String hora = lista.get(0).getHoraAgenda();
                hora = hora.substring(0, hora.length() - 3);
                hora = hora.trim();
                
                loadHorarios(dataFormatada,hora);
                
                int indexHora = Arrays.asList(horarios).indexOf(hora);
                cbxHora.setSelectedIndex(indexHora);
                
                
            } catch (ParseException ex) {
                Logger.getLogger(frmAgendamento.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPrincipal = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cbxEsp = new javax.swing.JComboBox<>();
        btnCadastrar = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtData = new javax.swing.JFormattedTextField(mfdata);
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtEnd = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        cbxMed = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        cbxHora = new javax.swing.JComboBox<>();
        btnSDatas = new javax.swing.JButton();
        txtCpf = new javax.swing.JFormattedTextField(mfcpf);
        ;
        txtTel = new javax.swing.JFormattedTextField(mftel);
        ;
        btnListar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblPrincipal.setBackground(new java.awt.Color(102, 153, 255));
        lblPrincipal.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblPrincipal.setForeground(new java.awt.Color(255, 255, 255));
        lblPrincipal.setText("Agendamentos :: Cadastrar");
        lblPrincipal.setOpaque(true);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Cpf do Paciente:");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("Nome do Paciente:");

        txtNome.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setText("Horário:");

        jLabel7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel7.setText("Especialidade:");

        cbxEsp.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cbxEsp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxEspActionPerformed(evt);
            }
        });

        btnCadastrar.setBackground(new java.awt.Color(0, 255, 102));
        btnCadastrar.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnCadastrar.setForeground(new java.awt.Color(255, 255, 255));
        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        btnLimpar.setBackground(new java.awt.Color(255, 51, 51));
        btnLimpar.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnLimpar.setForeground(new java.awt.Color(255, 255, 255));
        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setText("Data:");

        txtData.setText("jFormattedTextField1");
        txtData.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDataFocusLost(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel8.setText("Endereço do Paciente:");

        jLabel9.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel9.setText("Telefone do Paciente:");

        txtEnd.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel10.setText("Médico:");

        cbxMed.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cbxMed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxMedActionPerformed(evt);
            }
        });

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/search.png"))); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        cbxHora.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cbxHora.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        btnSDatas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/search.png"))); // NOI18N
        btnSDatas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSDatasActionPerformed(evt);
            }
        });

        txtCpf.setText("jFormattedTextField1");
        txtCpf.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtCpf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCpfFocusLost(evt);
            }
        });

        txtTel.setText("jFormattedTextField1");
        txtTel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtTel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTelFocusLost(evt);
            }
        });

        btnListar.setBackground(new java.awt.Color(102, 153, 255));
        btnListar.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnListar.setForeground(new java.awt.Color(255, 255, 255));
        btnListar.setText("Listar");
        btnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtNome, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                                    .addComponent(txtEnd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                                    .addComponent(txtCpf, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(112, 112, 112)
                                                .addComponent(btnCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(121, 121, 121))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(108, 108, 108)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cbxHora, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(txtData, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(cbxMed, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(btnListar, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(121, 121, 121)))
                                .addGap(5, 5, 5))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addGap(196, 196, 196)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbxEsp, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtTel, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSDatas, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtTel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cbxEsp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(cbxMed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6))
                    .addComponent(btnSDatas, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbxHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnListar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        try {
            String cpfPac, hora, cpfMed;
            cpfPac = sanitizeCpf(txtCpf.getText());
            cpfMed = medicosCPF.get(cbxMed.getSelectedIndex());
            hora = cbxHora.getSelectedItem().toString();
            String dataText = txtData.getText();
            
            if(cpfPac.isEmpty() || cpfMed.isEmpty() || hora.isEmpty() ||dataText.isEmpty()){
                JOptionPane.showMessageDialog(null, "Campos vazios!", "Erro", JOptionPane.ERROR_MESSAGE);
            }else{
                //VALIDANDO CPF
                if(ValidarCPF.isCPF(cpfPac)){
                    //FORMATANDO HORA
                    hora += ":00";

                    //FORMATANDO DATA
                    SimpleDateFormat sdfEntrada = new SimpleDateFormat("dd/MM/yyyy");
                    SimpleDateFormat sdfSaida = new SimpleDateFormat("yyyy-MM-dd");
                    Date dataPre = sdfEntrada.parse(dataText);
                    String dataFormatada = sdfSaida.format(dataPre);
                    
                    int respostaUpd = JOptionPane.showConfirmDialog(
                        null,
                        "Deseja atualizar os dados do usuário?", 
                        "Atualizar dados", 
                        JOptionPane.YES_NO_OPTION
                    );
                    if(respostaUpd == JOptionPane.YES_OPTION){
                        String nome = txtNome.getText();
                        String end = txtEnd.getText();
                        String tel = txtTel.getText();
                        tel = tel.replace("(", "").replace(")", "").replace("-", "");
                        tel = tel.trim();
                        
                        if(nome.isEmpty() || end.isEmpty() || tel.isEmpty()){
                            JOptionPane.showMessageDialog(null, "Os dados não podem ser vazios para a atualização!", "Erro", JOptionPane.ERROR_MESSAGE);
                        }else{
                            PacienteDTO objPacienteDTO = new PacienteDTO();
                            objPacienteDTO.setCpfPac(cpfPac);
                            objPacienteDTO.setNomePac(nome);
                            objPacienteDTO.setTelPac(tel);
                            objPacienteDTO.setEndPac(end);

                            PacienteDAO objPacienteDAO = new PacienteDAO();
                            objPacienteDAO.AlterarPaciente(objPacienteDTO);
                        }
                    }
                        AgendamentoDTO objAgendamentoDTO = new AgendamentoDTO();
                        objAgendamentoDTO.setCpfMed(cpfMed);
                        objAgendamentoDTO.setCpfPac(cpfPac);
                        objAgendamentoDTO.setDataAgenda(dataFormatada);
                        objAgendamentoDTO.setHoraAgenda(hora.toString());
                        AgendamentoDAO objAgendamentoDAO = new AgendamentoDAO();
                        
                        if(globalId != -1){
                            objAgendamentoDTO.setIdAgenda(globalId);
                            objAgendamentoDAO.alterarAgendamento(objAgendamentoDTO);
                            this.dispose();
                            
                        }else{
                            objAgendamentoDAO.cadastrarAgendamento(objAgendamentoDTO);

                            limparCampos();
                        }
                    
                    
                }else{
                    JOptionPane.showMessageDialog(null, "CPF inválido!", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (ParseException ex) {
            Logger.getLogger(frmAgendamento.class.getName()).log(Level.SEVERE, null, ex);
        }

        
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        // TODO add your handling code here:
        limparCampos();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void txtDataFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDataFocusLost
        // TODO add your handling code here:
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        try{
            Date date = sdf.parse(txtData.getText());
            txtData.setText(date.toString());
            
        } catch (ParseException e){
            
        }
    }//GEN-LAST:event_txtDataFocusLost

    private void cbxEspActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxEspActionPerformed
        // TODO add your handling code here:;
        cbxEsp.addActionListener (new ActionListener () {
            public void actionPerformed(ActionEvent e) {
               int selectedIndex = cbxEsp.getSelectedIndex();
                if (selectedIndex >= 0 && selectedIndex < especialidadesIndex.size()) {
                    int esp = especialidadesIndex.get(selectedIndex);
                    loadMedicos(esp);
                } else {
                    JOptionPane.showMessageDialog(null, "Erro: Índice fora do alcance!");
                }
            }
        });
    }//GEN-LAST:event_cbxEspActionPerformed

    private void cbxMedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxMedActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_cbxMedActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String cpf = sanitizeCpf(txtCpf.getText());
        ResultSet rs;
        try{
            PacienteDAO objPacienteDAO = new PacienteDAO();
            rs = objPacienteDAO.SelecionarPaciente(cpf);
            rs.next();
            if(rs != null){
                txtCpf.setText(maskCpf(rs.getString(1)));
                txtNome.setText(rs.getString(2));
                txtEnd.setText(rs.getString(3));
                txtTel.setText(rs.getString(4));
            }else{
                JOptionPane.showMessageDialog(null, "Paciente não encontrado!", "Erro", JOptionPane.ERROR_MESSAGE);
            }
            
            
        }catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "Carregar Paciente:" +
           erro);
        }
        
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnSDatasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSDatasActionPerformed
        if(!txtData.getText().isEmpty()){
            try {
                // TODO add your handling code here:
                String dataText = txtData.getText();
                SimpleDateFormat sdfEntrada = new SimpleDateFormat("dd/MM/yyyy");
                SimpleDateFormat sdfSaida = new SimpleDateFormat("yyyy-MM-dd");
                Date data = sdfEntrada.parse(dataText);
                String dataFormatada = sdfSaida.format(data);
                
                loadHorarios(dataFormatada);
            } catch (ParseException ex) {
                Logger.getLogger(frmAgendamento.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_btnSDatasActionPerformed

    private void txtCpfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCpfFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCpfFocusLost

    private void txtTelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTelFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTelFocusLost

    private void btnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarActionPerformed
        // TODO add your handling code here:
        new frmViewAgendamento().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnListarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmAgendamento(-1).setVisible(true);
            }
        });
    }
    
    public void loadHorarios(String data) throws ParseException {
        int medSelected = cbxMed.getSelectedIndex();
        String cpfMedSelected = medicosCPF.get(medSelected);
        AgendamentoDAO objAgendamentoDAO = new AgendamentoDAO();
        ResultSet rs = objAgendamentoDAO.buscarHorarios(data, cpfMedSelected);

        try {
            Vector<String> horariosOcupados = new Vector<>();

            while (rs != null && rs.next()) {
                String horaAgendada = rs.getString("horaAgenda");
                SimpleDateFormat sdfBanco = new SimpleDateFormat("HH:mm:ss");
                SimpleDateFormat sdfPadrao = new SimpleDateFormat("HH:mm");
                Date horaDate = sdfBanco.parse(horaAgendada);
                horaAgendada = sdfPadrao.format(horaDate);
                horariosOcupados.add(horaAgendada.trim());
            }

            Vector<String> horariosDisponiveis = new Vector<>();
            for (String horario : horarios) {
                horariosDisponiveis.add(horario.trim());
            }

            // Remover horários ocupados
            Vector<String> novosHorariosDisponiveis = new Vector<>();
            for (String disponivel : horariosDisponiveis) {
                if (!horariosOcupados.contains(disponivel)) {
                    novosHorariosDisponiveis.add(disponivel);
                }
            }

            cbxHora.removeAllItems();
            for (String horario : novosHorariosDisponiveis) {
                cbxHora.addItem(horario);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar horários: " + e.getMessage());
        }
    }
    
    public void loadHorarios(String data, String hr) throws ParseException {
        int medSelected = cbxMed.getSelectedIndex();
        String cpfMedSelected = medicosCPF.get(medSelected);
        AgendamentoDAO objAgendamentoDAO = new AgendamentoDAO();
        ResultSet rs = objAgendamentoDAO.buscarHorarios(data, cpfMedSelected);

        try {
            Vector<String> horariosOcupados = new Vector<>();

            while (rs != null && rs.next()) {
                String horaAgendada = rs.getString("horaAgenda");
                SimpleDateFormat sdfBanco = new SimpleDateFormat("HH:mm:ss");
                SimpleDateFormat sdfPadrao = new SimpleDateFormat("HH:mm");
                Date horaDate = sdfBanco.parse(horaAgendada);
                horaAgendada = sdfPadrao.format(horaDate);
                hr = sdfPadrao.format(sdfPadrao.format(hr));
                if(horaAgendada != hr){
                    horariosOcupados.add(horaAgendada.trim());
                }
                
            }

            Vector<String> horariosDisponiveis = new Vector<>();
            for (String horario : horarios) {
                horariosDisponiveis.add(horario.trim());
            }

            // Remover horários ocupados
            Vector<String> novosHorariosDisponiveis = new Vector<>();
            for (String disponivel : horariosDisponiveis) {
                if (!horariosOcupados.contains(disponivel)) {
                    novosHorariosDisponiveis.add(disponivel);
                }
            }

            cbxHora.removeAllItems();
            for (String horario : novosHorariosDisponiveis) {
                cbxHora.addItem(horario);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar horários: " + e.getMessage());
        }
    }

    
    public void loadEspecialidades(){
        ResultSet rs;
        try{
            EspecialidadeDAO objEspecialidadeDAO = new EspecialidadeDAO();
            rs = objEspecialidadeDAO.carregarCBX();
            while(rs.next()){
                especialidadesIndex.addElement(rs.getInt(1));
                cbxEsp.addItem(rs.getString(2));
            }
        }catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar combobox especialidades:" +
           erro);
        }
    }
    
    public void loadMedicos(int esp){
        ResultSet rs;
        
        try{
            MedicoDAO objMedicoDAO= new MedicoDAO();
            
            rs = objMedicoDAO.CarregarCBX(esp);
            
            medicosCPF.clear();
            espMed.clear();
            cbxMed.removeAllItems();
            while(rs.next()){
                medicosCPF.addElement(rs.getString(1));
                espMed.addElement(rs.getInt(6));
                cbxMed.addItem(rs.getString(2));
                
            }
        }catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar combobox médicos:" +
           erro);
        }
    }
    public void limparCampos(){
        txtCpf.setText("");
        txtNome.setText("");
        txtEnd.setText("");
        txtTel.setText("");
        txtData.setText("");
        cbxHora.removeAllItems();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnListar;
    private javax.swing.JButton btnSDatas;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cbxEsp;
    private javax.swing.JComboBox<String> cbxHora;
    private javax.swing.JComboBox<String> cbxMed;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblPrincipal;
    private javax.swing.JFormattedTextField txtCpf;
    private javax.swing.JFormattedTextField txtData;
    private javax.swing.JTextField txtEnd;
    private javax.swing.JTextField txtNome;
    private javax.swing.JFormattedTextField txtTel;
    // End of variables declaration//GEN-END:variables
}
